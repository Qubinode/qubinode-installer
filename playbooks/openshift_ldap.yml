- name: configure openshift IdM auth
  hosts: localhost
  become: no
  gather_facts: no
  vars_files:
    - vars/all.yml
    - vars/kvm_host.yml
    - vars/vault.yml
    - vars/idm.yml
    - vars/ocp4.yml
  vars:
    dn_attribute: []
    homedir: "{{ lookup('env','HOME') }}"
    bind_user_pass: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters') }}"
    vault_pass_file: "{{ homedir }}/.vaultkey"
    vault_file: "{{ project_dir }}/playbooks/vars/vault.yml"

  environment:
    IPA_HOST: "{{ ipa_host }}"
    IPA_USER: "{{ idm_admin_user }}"
    IPA_PASS: "{{ idm_admin_pwd }}"
    IPA_TIMEOUT: 40

  tasks:
    - name: setup IdM distinguished name
      vars:
        - dn_name: "dc={{ item }}"
      set_fact:
        dn_attribute: "{{ dn_attribute + [ dn_name ] }}"
      loop: "{{ domain.split('.') | lower }}"

    - name: contruct IdM bind user
      set_fact:
        openshift_binddn: "uid={{ openshift_bind_user }},cn=users,cn=accounts,{{ dn_attribute | join(',') }}"
        openshift_base_dn: "cn=users,cn=accounts,{{ dn_attribute | join(',') }}"

    - name: check if bind user exist and login works
      command: ldapsearch -x -H ldap://{{ ipa_host }} -L -D '{{ openshift_binddn }}' -w '{{ openshift_binddn_password }}'
      register: bind_user_exist
      failed_when: False
      changed_when: False
      delegate_to: "{{ idm_hostname }}"
      become: yes

    - name: create bind user
      when: bind_user_exist.rc != 0
      block:
        - set_fact:
            set_bind_password: "{{ bind_user_pass }}"
          when: openshift_binddn_password == ''

        - name: update vault with bind_user password
          shell: >
            ansible-vault decrypt {{ vault_file }} --vault-password-file={{ vault_pass_file }};
            echo "ocp_bind_pass: {{ set_bind_password }}" >> {{  vault_file }};
            ansible-vault encrypt {{ vault_file }} --vault-password-file={{ vault_pass_file }}
          when: openshift_binddn_password == ''

        - name: debug openshift set_bind_password
          debug:
            var: set_bind_password
            verbosity: 3
          when: openshift_binddn_password == ''

        - name: Set OpenShift Bind Fact
          set_fact:
            openshift_binddn_password: "{{ set_bind_password }}"
          when: openshift_binddn_password == ''
          
        - name: debug openshift openshift_binddn_password 
          debug:
            var: openshift_binddn_password
            verbosity: 3
          when: openshift_binddn_password != ''

        - name: get user {{ idm_admin_user }} keytab
          shell: echo "{{ idm_admin_pwd }}" | kinit {{ idm_admin_user }}@{{ idm_realm }}
          changed_when: False
          delegate_to: "{{ idm_hostname }}"
          become: yes

        - name: create openshift bind user
          vars:
            - ldiff_file: |
                dn: {{ openshift_binddn }}
                add:objectclass:account
                add:objectclass:simplesecurityobject
                add:uid:{{ openshift_bind_user }}
                add:userPassword: {{ openshift_binddn_password }}
                add:passwordExpirationTime: {{ openshift_binddn_password_expiration }}
                add:nsIdleTimeout:0
          shell: |
            cat > /tmp/ldiff <<EOF
            {{ ldiff_file }}
            EOF
            ipa-ldap-updater /tmp/ldiff
            rm -f /tmp/ldiff
          delegate_to: "{{ idm_hostname }}"
          become: yes

    - name: check if ldap secret exist
      shell: oc get secret -n openshift-config | grep ldap-secret
      register: ldap_secret_exist
      failed_when: False
      changed_when: False

    - name: check if configmap already exist
      shell: oc get configmap -n openshift-config | grep ca-config-map
      failed_when: False
      register: ca_config_map
      changed_when: False

    - name: download IdM server certificate
      get_url:
        url: https://{{ ipa_host }}/ipa/config/ca.crt
        dest: /tmp/idm_ca.crt
        validate_certs: false
      when: ca_config_map.rc != 0

    - name: create openshift ldap secret
      command: oc create secret generic ldap-secret --from-literal=bindPassword={{ openshift_binddn_password }} -n openshift-config
      register: create_ldap_secret
      changed_when: False
      when: ldap_secret_exist.rc != 0

    - name: create config map with IdM cert auth
      shell: oc create configmap ca-config-map --from-file=ca.crt=/tmp/idm_ca.crt -n openshift-config
      register: get_ca_auth
      changed_when: False
      when: ca_config_map.rc != 0

    - name: create ldap customer resource
      vars:
        - ldap_cr: |
            apiVersion: config.openshift.io/v1
            kind: OAuth
            metadata:
              name: cluster
            spec:
              identityProviders:
              - name: ldapidp
                mappingMethod: claim
                type: LDAP
                ldap:
                  attributes:
                    id:
                    - dn
                    email:
                    - mail
                    name:
                    - cn
                    preferredUsername:
                    - uid
                  bindDN: "{{ openshift_binddn }}"
                  bindPassword:
                    name: ldap-secret
                  ca:
                    name: ca-config-map
                  insecure: false
                  url: "ldaps://{{ ipa_host }}/{{ openshift_base_dn }}?uid"
      shell: |
        cat > /tmp/ldap_csr <<EOF
        {{ ldap_cr }}
        EOF
        oc apply -f /tmp/ldap_csr
