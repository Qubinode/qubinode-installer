- name: create nodes dns records on IDM server
  hosts: localhost
  become: yes
  gather_facts: yes
  vars_files:
    - vars/all.yml
    - vars/vault.yml
    - vars/idm.yml
    - vars/ocp4.yml
  environment:
    IPA_HOST: "{{idm_hostname}}.{{ domain }}"
    IPA_USER: "{{ idm_admin_user }}"
    IPA_PASS: "{{ idm_admin_pwd }}"

  tasks:
    - fail: msg="Bailing out. this play requires 'idm_server_ip'  your idm server ip"
      when: idm_server_ip |length == 0

    - name: loop through vm types
      include_tasks: ocp4_02.1_check_dns_entries.yml

    - name: set dns record state
      set_fact:
        record_state: "{{ 'absent' if dns_teardown|bool else 'present' }}"

    - name: add bootstrap to dns forward zone
      vars:
        ip: "{{ vn_subnet.split('.')[:3] | join('.')}}.2"
        name: bootstrap
        ptr: 2
      set_fact:
        records: "{{ records|default([]) + [ {'hostname': name, 'ipaddr': ip, 'ptr_record': ptr} ] }}"
      tags: idm

    - name: add bootstrap to reverse forward zone
      vars:
        ip: "{{ vn_subnet.split('.')[:3] | join('.')}}.2"
        name: "bootstrap"
        ptr: 2
      set_fact:
        reverse_records: "{{ reverse_records|default([]) + [ {'hostname': name, 'ipaddr': ip, 'ptr_record': ptr} ] }}"
      tags: idm

    - name: add api-int to dns records list
      vars:
        ip: "{{ vn_subnet.split('.')[:3] | join('.')}}.1"
        name: api-int
        ptr: 1
      set_fact:
        records: "{{ records|default([]) + [ {'hostname': name, 'ipaddr': ip, 'ptr_record': ptr} ] }}"
      tags: idm

    - name: add api to dns records list
      vars:
        ip: "{{ kvm_host_ip }}"
        name: api
        ptr: 1
      set_fact:
        records: "{{ records|default([]) + [ {'hostname': name, 'ipaddr': ip, 'ptr_record': ptr} ] }}"
      tags: idm

    - name: set  master nodes forward zone records
      vars:
        ip: "{{ vn_subnet.split('.')[:3] | join('.')}}.{{ 10 + item|int }}"
        name: "master-{{ item }}"
        ptr: "{{ 10 + item|int }}"
      set_fact:
        records: "{{ records|default([]) + [ {'hostname': name, 'ipaddr': ip, 'ptr_record': ptr} ] }}"
      with_sequence: start=0 end="{{ master_count|int - 1 }}" stride=1
      tags: idm

    - name: set  master nodes reverse zone records
      vars:
        ip: "{{ vn_subnet.split('.')[:3] | join('.')}}.{{ 10 + item|int }}"
        name: "master-{{ item }}"
        ptr: "{{ 10 + item|int }}"
      set_fact:
        reverse_records: "{{ reverse_records|default([]) + [ {'hostname': name, 'ipaddr': ip, 'ptr_record': ptr} ] }}"
      with_sequence: start=0 end="{{ master_count|int - 1 }}" stride=1
      tags: idm

    - name: set etcd nodes forward zone records
      vars:
        ip: "{{ vn_subnet.split('.')[:3] | join('.')}}.{{ 10 + item|int }}"
        name: "etcd-{{ item }}"
        ptr: "{{ 10 + item|int }}"
      set_fact:
        records: "{{ records|default([]) + [ {'hostname': name, 'ipaddr': ip, 'ptr_record': ptr} ] }}"
      with_sequence: start=0 end="{{ master_count|int - 1 }}" stride=1
      tags: idm

    - name:  set compute nodes forward zone records
      vars:
        ip: "{{ vn_subnet.split('.')[:3] | join('.')}}.{{ 13 + item|int }}"
        name: "compute-{{ item }}"
        ptr: "{{ 13 + item|int }}"
      set_fact:
        records: "{{ records|default([]) + [ {'hostname': name, 'ipaddr': ip, 'ptr_record': ptr} ] }}"
      with_sequence: start=0 end="{{ compute_count|int - 1 }}" stride=1
      tags: idm

    - name:  set compute nodes reverse zone records
      vars:
        ip: "{{ vn_subnet.split('.')[:3] | join('.')}}.{{ 13 + item|int }}"
        name: "compute-{{ item }}"
        ptr: "{{ 13 + item|int }}"
      set_fact:
        reverse_records: "{{ reverse_records|default([]) + [ {'hostname': name, 'ipaddr': ip, 'ptr_record': ptr} ] }}"
      with_sequence: start=0 end="{{ compute_count|int - 1 }}" stride=1
      tags: idm

    - name: create forward dns zone {{ idm_dns_forward_zone }}
      ipa_dnszone:
        state: "{{ record_state }}"
        zone_name: "{{ idm_dns_forward_zone }}"
        validate_certs: no
      tags: idm

    - name: create reverse dns zone {{ idm_dns_reverse_zone }}
      ipa_dnszone:
        state: "{{ record_state }}"
        zone_name: "{{ idm_dns_reverse_zone }}"
        validate_certs: no
      tags: idm

    - name: Create/Delete A Records
      ipa_dnsrecord:
        zone_name: "{{ idm_dns_forward_zone }}"
        record_name: "{{ item.hostname }}.{{ cluster_name }}"
        record_type: A
        record_value: "{{ item.ipaddr }}"
        state: "{{ record_state }}"
        validate_certs: no
      with_items: "{{ records }}"
      when: not dns_teardown|bool
      tags: idm

    - name: Create/Delete PTR Records
      ipa_dnsrecord:
        zone_name: "{{ idm_dns_reverse_zone }}"
        record_name: "{{ item.ptr_record }}"
        record_type: PTR
        record_value: "{{ item.hostname }}.{{ cluster_name }}.{{ public_domain }}."
        state: "{{ record_state }}"
        validate_certs: no
      with_items: "{{ reverse_records }}"
      when: not dns_teardown|bool
      tags: idm

    # This requires ansible 2.7
    #- name: create SRV records for openshift cluster {{ cluster_name }}
    #  vars:
    #    name: "etcd-{{ item }}"
    #  ipa_dnsrecord:
    #    zone_name: "{{ idm_dns_forward_zone }}"
    #    record_name: "_etcd-server-ssl._tcp.{{ idm_dns_forward_zone }}"
    #    record_type: 'SRV'
    #    record_value: "0 10 2380 {{ name }}.{{ idm_dns_forward_zone }}"
    #    state: "{{ record_state }}"
    #    validate_certs: no
    #  with_sequence: start=0 end="{{ master_count|int - 1 }}" stride=1
    #  when: not dns_teardown|bool

    - name: Generate IPA Session Cookie
      vars:
      uri:
        url: "https://{{ ipa_host }}/ipa/session/login_password"
        validate_certs: no
        method: POST
        status_code: 200
        headers:
          Content-Type: "application/x-www-form-urlencoded"
          Accept: "text/plain"
          Referer: "https://{{ ipa_host }}/ipa"
        body: "user={{ idm_admin_user }}&password={{ idm_admin_pwd }}"
      register: ipa_session
      run_once: true
      when: not dns_teardown|bool
      tags: idm

    - name:  Create Wildcard for Applications
      uri:
        url: "https://{{ ipa_host }}/ipa/session/json"
        validate_certs: no
        method: POST
        status_code: 200
        headers:
          Cookie: "{{ ipa_session.set_cookie }}"
          Accept: "application/json"
          Referer: "https://{{ ipa_host }}/ipa"
        body:
          method: dnsrecord_add
          params:
          - - "{{ domain }}."
            - "{{ dns_wildcard }}"
          - a_part_ip_address: "{{ kvm_host_ip }}"
            a_extra_create_reverse: false
        body_format: json
      when: not dns_teardown|bool
      tags: idm

    - name:  Create Wildcard for Applications
      uri:
        url: "https://{{ ipa_host }}/ipa/session/json"
        validate_certs: no
        method: POST
        status_code: 200
        headers:
          Cookie: "{{ ipa_session.set_cookie }}"
          Accept: "application/json"
          Referer: "https://{{ ipa_host }}/ipa"
        body:
          method: dnsrecord_add
          params:
          - - "{{ domain }}."
            - "{{ dns_wildcard }}"
          - a_part_ip_address: "{{ nat_gateway }}"
            a_extra_create_reverse: false
        body_format: json
      when: not dns_teardown|bool
      tags: idm

    - name: Create SRV Records
      uri:
        url: "https://{{ ipa_host }}/ipa/session/json"
        validate_certs: no
        method: POST
        status_code: 200
        headers:
          Cookie: "{{ ipa_session.set_cookie }}"
          Accept: "application/json"
          Referer: "https://{{ ipa_host }}/ipa"
        body:
          method: dnsrecord_add
          params:
          - - "{{ idm_dns_forward_zone }}."
            - "_etcd-server-ssl._tcp.{{ cluster_name }}"
          - srv_part_priority: '0'
            srv_part_weight: '10'
            srv_part_port: '2380'
            srv_part_target: "{{ item }}.{{ cluster_name }}.{{ idm_dns_forward_zone }}."
        body_format: json
      when: not dns_teardown|bool
      with_items:
        - "etcd-0"
        - "etcd-1"
        - "etcd-2"
      tags: idm
