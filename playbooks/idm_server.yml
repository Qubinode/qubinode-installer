---
- name: deploy IdM server
  hosts: ipaserver
  remote_user: admin
  become: true
  gather_facts: true
  vars_files:
    - vars/all.yml
    - vars/kvm_host.yml
    - vars/vault.yml
    - vars/idm.yml

  tasks:
    - name: Check if IdM is answering
      vars:
        vm_name: "{{ dns_server_vm.dns_name }}"
      uri:
        url: "https://{{ vm_name  }}.{{ domain }}/ipa/ui"
        user: "{{ idm_admin_user }}"
        password: "{{ idm_admin_password }}"
        force_basic_auth: yes
      register: idm_is_installed
      ignore_errors: yes
      tags: [always]

    - name: create the fact idm_is_installed
      set_fact:
        idm_is_installed: "{{ False if idm_is_installed.failed | default(False) or idm_is_installed.status != 200 else True }}"
      tags: [always]

    # This is a work around the deploy-kvm-vm role should be updated
    # the implementation for resolv.conf was there to support OCP3
    - name: update KVM host /etc/resolv.conf to point to the IdM server {{ vm_name }}
      copy:
        content: |
          search {{ search_domains  | first }}
          nameserver 8.8.8.8
          nameserver 1.1.1.1
        dest: /etc/resolv.conf
      when: not idm_is_installed
      tags: [always]

    - name: set idm_repos for rhel8
      set_fact:
        rhsm_repos: "{{ idm_repos_8 }}"
      when: (ansible_facts['os_family'] == "RedHat" and ansible_facts['distribution_major_version'] == '8')

    - name: set idm_repos for rhel7
      set_fact:
        rhsm_repos: [ "{{ idm_repos_7 }}" ]
      when: (ansible_facts['os_family'] == "RedHat" and ansible_facts['distribution_major_version'] == '7')

    - name: ensure system is registered to Red Hat
      #vars:
        #rhsm_repos: "{{ idm_repos }}"
      include_role:
        name: swygue-redhat-subscription
      when: not idm_is_installed or force_idm_redeployment|bool
      tags: [always]

    ###############################################################
    - name: deploy idm on RHEL 8
      when:
        - not idm_is_installed or force_idm_redeployment|bool
        - (ansible_facts['os_family'] == "RedHat" and ansible_facts['distribution_major_version'] == '8')
      block:

        - name: ensure ansible-freeipa is installed
          package:
            name: ansible-freeipa
            state: present
          delegate_to: 127.0.0.1
          become: yes

        - name: copy ansible-freeipa roles to {{ project_dir }}
          copy:
            src: "/usr/share/ansible/roles/{{ item }}"
            dest: "{{ project_dir }}/playbooks/roles"
            owner: "{{ admin_user }}"
            group: "{{ admin_user }}"
          loop:
            - ipaclient
            - ipareplica
            - ipaserver
          delegate_to: 127.0.0.1

        - name: Install IDM server on rhel 8
          include_role:
            name: ipaserver
          vars:
            - ipaserver_domain: "{{ domain }}"
            - idm_realm: "{{ domain | upper }}"
            - ipaserver_realm: "{{ idm_realm }}"
            - ipaserver_setup_dns: "yes"
            - ipaserver_no_host_dns: yes
            - ipaserver_setup_kra: yes
            - ipaserver_forwarders:
              - "{{ dns_forwarder }}"
            - ipaserver_reverse_zones: "{{ idm_reverse_zones }}"
            - ipaadmin_password: "{{ idm_admin_password }}"
            - ipadm_password: "{{ idm_dm_pwd }}"
          tags: [install,preinstall,installer,firewall,always,result]

    ###############################################################
    - name: deploy idm on RHEL 7
      when:
        - not idm_is_installed or force_idm_redeployment
        - (ansible_facts['os_family'] == "RedHat" and ansible_facts['distribution_major_version'] == '7')
      block:

        - name: update system
          command: yum update -y
          args:
            warn: false
          changed_when: false

        - name: Install IDM server
          include_role:
            name: ansible-idm
          tags: [install,preinstall,installer,firewall,always,result]

        - name: ensure firewalld rules are loaded
          command: systemctl restart firewalld
          args:
            warn: no
          changed_when: False
          failed_when: False

    ###############################################################
    - name: ensure backup folder is created
      vars:
        ansible_python_interpreter: /usr/bin/python3
      file:
        path: "{{ project_dir }}/backups"
        state: directory
        mode: '0755'
      delegate_to: 127.0.0.1

    - name: check if resolv.conf backup file exists
      vars:
        ansible_python_interpreter: /usr/bin/python3
      stat:
        path: "{{ project_dir }}/backups/resolv.conf"
      register: resolv_backup
      delegate_to: 127.0.0.1

    - name: backup original /etc/resolv.conf file
      vars:
        ansible_python_interpreter: /usr/bin/python3
      copy:
        src: /etc/resolv.conf
        dest: "{{ project_dir }}/backups/resolv.conf"
        follow: yes
      when: not vm_teardown|bool and not resolv_backup.stat.exists 
      delegate_to: 127.0.0.1

    - name: update KVM host /etc/resolv.conf to point to the IdM server {{ vm_name }}
      vars:
        ansible_python_interpreter: /usr/bin/python3
      copy:
        content: |
          search {{ search_domains  | first }}
          nameserver {{ idm_server_ip }}
        dest: /etc/resolv.conf
      when: not force_idm_redeployment|bool and not vm_teardown|bool
      delegate_to: 127.0.0.1

    - name: post IDM server install check if IDM is answering
      vars:
        vm_name: "{{ dns_server_vm.dns_name }}"
      uri:
        url: "https://{{ vm_name  }}.{{ domain }}/ipa/ui"
        user: "{{ idm_admin_user }}"
        password: "{{ idm_admin_password }}"
        force_basic_auth: yes
      register: idm_is_installed
      ignore_errors: yes
      tags: [always]

    - name: set idm_is_installed fact
      set_fact:
        idm_is_installed: "{{ False if idm_is_installed.failed | default(False) or idm_is_installed.status != 200 else True }}"
      tags: [always]
    
    - name: Undo resolv.conf file change 
      vars:
        ansible_python_interpreter: /usr/bin/python3
      copy:
        src: "{{ project_dir }}/backups/resolv.conf"
        dest: /etc/resolv.conf
        follow: yes
      when: not idm_is_installed|bool   
      delegate_to: 127.0.0.1
      
    - name: fail playbook if IdM server is not installed
      fail:
        msg: |
          The IDM server does not appear to have been installed.
          Please re-run qubinode-installer or undeploy and start again.
      when: not idm_is_installed|bool